# Generated by Django 3.2.5 on 2021-08-19 04:16

import django.contrib.postgres.fields.citext
import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import imagekit.models.fields
from django.conf import settings
from django.contrib.postgres.operations import CITextExtension
from django.db import migrations, models

import apps.users.models.users
import config.settings.common.paths


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('skills', '0001_initial'),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last name')),
                ('email', django.contrib.postgres.fields.citext.CICharField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.', verbose_name='Active')),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, max_length=512, null=True, upload_to=config.settings.common.paths._default_media_path, verbose_name='Avatar')),
                ('location', models.TextField(blank=True, help_text='Stores a location of the current user.', verbose_name='Location')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', apps.users.models.users.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'CV',
                'verbose_name_plural': 'CVs',
            },
        ),
        migrations.CreateModel(
            name='CVSkillEvaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('cv_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluate_skills', to='users.cv')),
            ],
            options={
                'verbose_name': 'Current cv skill',
                'verbose_name_plural': 'Current cv skills',
            },
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Url',
                'verbose_name_plural': 'Urls',
            },
        ),
        migrations.CreateModel(
            name='EvaluationInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_approved', models.BooleanField(help_text='This indicator shows whether the skill is approved.', null=True, verbose_name='Is approved?')),
                ('comment', models.CharField(blank=True, max_length=255, verbose_name='Comment')),
                ('owner', models.ForeignKey(help_text='User who evaluate this skill.', on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
                ('skill_from_cv', models.ForeignKey(help_text='Skill that is being evaluated.', on_delete=django.db.models.deletion.CASCADE, related_name='evaluated_skill', to='users.cvskillevaluation')),
            ],
            options={
                'verbose_name': 'Evaluation info',
                'verbose_name_plural': 'Evaluation info',
                'unique_together': {('skill_from_cv', 'owner')},
            },
        ),
        migrations.AddField(
            model_name='cvskillevaluation',
            name='evaluations',
            field=models.ManyToManyField(blank=True, through='users.EvaluationInfo', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cvskillevaluation',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cv_skills', to='skills.skill'),
        ),
        migrations.AddField(
            model_name='cv',
            name='skills',
            field=models.ManyToManyField(through='users.CVSkillEvaluation', to='skills.Skill'),
        ),
        migrations.AddField(
            model_name='user',
            name='cv',
            field=models.OneToOneField(blank=True, help_text='Stores a CV.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner', to='users.cv', verbose_name='CV'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='cvskillevaluation',
            unique_together={('cv_owner', 'skill')},
        ),
    ]
